/*
 * Custom Glove80 keymap - Stock layout with minimal productivity mods
 *
 * Based on official MoErgo Glove80 default layout
 * 
 * Modifications:
 * - A = tap 'a', hold = Select All (Ctrl+A)
 * - S = tap 's', hold = Save (Ctrl+S)
 * - D = tap 'd', hold = Duplicate line (Ctrl+D)
 * - F = tap 'f', hold = Find (Ctrl+F)
 * - Z/X/C/V/Y = tap letter, hold = Undo/Cut/Copy/Paste/Redo
 * - Enter = tap Enter, hold Save (Ctrl+S)
 * - Hyphen = tap hyphen, hold = em dash
 * - Tab and Esc positions swapped
 * - Esc = tap Esc, hold = toggle Caps Lock
 * - Tab = tap Tab, hold = Windows+Tab (Task View)
 * - Shifts = normal shift
 * - Space unchanged (plain space)
 * - Backspace and Delete = normal (Ctrl+Backspace/Delete work natively for word deletion)
 * - All other layers kept as stock
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // Stock layer tap dance
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        // CUSTOM: Left Shift tap dance - double tap for Caps Word
        lshift_capsword_td: lshift_capsword_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "LSHIFT_CAPSWORD_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };

        // CUSTOM: Right Shift tap dance - double tap for Caps Word
        rshift_capsword_td: rshift_capsword_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHIFT_CAPSWORD_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        // Stock magic behavior
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // CUSTOM: Esc / Caps Lock Toggle
        esc_caps_ht: esc_caps_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "ESC_CAPS_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        // CUSTOM: Tab / Windows+Tab (Task View)
        tab_taskview_ht: tab_taskview_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TAB_TASKVIEW_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            require-prior-idle-ms = <150>;
            bindings = <&taskview>, <&kp>;
        };

        // CUSTOM: S / Save
        s_save_ht: s_save_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "S_SAVE_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&save>, <&kp>;
        };

        // CUSTOM: F / Find
        f_find_ht: f_find_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "F_FIND_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&find>, <&kp>;
        };

        // CUSTOM: D / Duplicate
        d_duplicate_ht: d_duplicate_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "D_DUPLICATE_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&duplicate>, <&kp>;
        };

        // CUSTOM: Enter / Ctrl+Shift+Enter
        enter_cse_ht: enter_cse_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER_CSE_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&ctrl_shift_enter>, <&kp>;
        };

        // CUSTOM: Z / Undo
        z_undo_ht: z_undo_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Z_UNDO_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&undo>, <&kp>;
        };

        // CUSTOM: X / Cut
        x_cut_ht: x_cut_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "X_CUT_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&cut>, <&kp>;
        };

        // CUSTOM: C / Copy
        c_copy_ht: c_copy_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "C_COPY_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&copy>, <&kp>;
        };

        // CUSTOM: V / Paste
        v_paste_ht: v_paste_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "V_PASTE_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&paste>, <&kp>;
        };

        // CUSTOM: Y / Redo
        y_redo_ht: y_redo_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Y_REDO_HT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&redo>, <&kp>;
        };

        // CUSTOM: A / Select All
        a_selectall_ht: a_selectall_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "A_SELECTALL_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&selectall>, <&kp>;
        };

        // CUSTOM: Hyphen / Em dash
        hyphen_emdash_ht: hyphen_emdash_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPHEN_EMDASH_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&emdash>, <&kp>;
        };

        // CUSTOM: B / Bold
        b_bold_ht: b_bold_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "B_BOLD_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&bold>, <&kp>;
        };

        // CUSTOM: I / Italic
        i_italic_ht: i_italic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "I_ITALIC_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&italic>, <&kp>;
        };

        // CUSTOM: U / Underline
        u_underline_ht: u_underline_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "U_UNDERLINE_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&underline>, <&kp>;
        };

        // CUSTOM: O / Open
        o_open_ht: o_open_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "O_OPEN_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            require-prior-idle-ms = <150>;
            bindings = <&open>, <&kp>;
        };

        // CUSTOM: N / New
        n_new_ht: n_new_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "N_NEW_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&new>, <&kp>;
        };

        // CUSTOM: P / Screenshot
        p_screenshot_ht: p_screenshot_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "P_SCREENSHOT_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&screenshot>, <&kp>;
        };

        // CUSTOM: Equals / En dash
        equals_endash_ht: equals_endash_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "EQUALS_ENDASH_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&endash>, <&kp>;
        };

        // CUSTOM: Left Alt / Enter (for one-handed operation)
        lalt_enter_ht: lalt_enter_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LALT_ENTER_HT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // Stock RGB macro
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        // Stock Bluetooth profiles
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 3>;
        };

        // CUSTOM: Productivity macros
        save: save_macro {
            compatible = "zmk,behavior-macro";
            label = "SAVE";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp S>, <&macro_release &kp LCTRL>;
        };

        undo: undo_macro {
            compatible = "zmk,behavior-macro";
            label = "UNDO";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp Z>, <&macro_release &kp LCTRL>;
        };

        cut: cut_macro {
            compatible = "zmk,behavior-macro";
            label = "CUT";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>;
        };

        copy: copy_macro {
            compatible = "zmk,behavior-macro";
            label = "COPY";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp C>, <&macro_release &kp LCTRL>;
        };

        paste: paste_macro {
            compatible = "zmk,behavior-macro";
            label = "PASTE";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp V>, <&macro_release &kp LCTRL>;
        };

        redo: redo_macro {
            compatible = "zmk,behavior-macro";
            label = "REDO";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp Y>, <&macro_release &kp LCTRL>;
        };

        selectall: selectall_macro {
            compatible = "zmk,behavior-macro";
            label = "SELECTALL";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp A>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Arrow key combos for text selection
        select_word: select_word_macro {
            compatible = "zmk,behavior-macro";
            label = "SELECT_WORD";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL &kp LSHFT>, <&macro_tap &kp RIGHT>, <&macro_release &kp LCTRL &kp LSHFT>;
        };

        select_section: select_section_macro {
            compatible = "zmk,behavior-macro";
            label = "SELECT_SECTION";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL &kp LSHFT>, <&macro_tap &kp DOWN>, <&macro_release &kp LCTRL &kp LSHFT>;
        };

        // CUSTOM: Windows+Tab for Task View
        taskview: taskview_macro {
            compatible = "zmk,behavior-macro";
            label = "TASKVIEW";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>, <&macro_tap &kp TAB>, <&macro_release &kp LGUI>;
        };

        // CUSTOM: Find (Ctrl+F)
        find: find_macro {
            compatible = "zmk,behavior-macro";
            label = "FIND";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp F>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Duplicate line (Ctrl+D)
        duplicate: duplicate_macro {
            compatible = "zmk,behavior-macro";
            label = "DUPLICATE";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp D>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Go to start of document (Ctrl+Home)
        doc_start: doc_start_macro {
            compatible = "zmk,behavior-macro";
            label = "DOC_START";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp HOME>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Go to end of document (Ctrl+End)
        doc_end: doc_end_macro {
            compatible = "zmk,behavior-macro";
            label = "DOC_END";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp END>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Em dash (—) - Windows Alt+0151
        emdash: emdash_macro {
            compatible = "zmk,behavior-macro";
            label = "EMDASH";
            #binding-cells = <0>;
            bindings 
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N1>
                , <&macro_release &kp LALT>;
        };

        // CUSTOM: Bold (Ctrl+B)
        bold: bold_macro {
            compatible = "zmk,behavior-macro";
            label = "BOLD";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp B>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Italic (Ctrl+I)
        italic: italic_macro {
            compatible = "zmk,behavior-macro";
            label = "ITALIC";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp I>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Underline (Ctrl+U)
        underline: underline_macro {
            compatible = "zmk,behavior-macro";
            label = "UNDERLINE";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp U>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Open (Ctrl+O)
        open: open_macro {
            compatible = "zmk,behavior-macro";
            label = "OPEN";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp O>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: New (Ctrl+N)
        new: new_macro {
            compatible = "zmk,behavior-macro";
            label = "NEW";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp N>, <&macro_release &kp LCTRL>;
        };

        // CUSTOM: Screenshot (Windows+Shift+S)
        screenshot: screenshot_macro {
            compatible = "zmk,behavior-macro";
            label = "SCREENSHOT";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI &kp LSHFT>, <&macro_tap &kp S>, <&macro_release &kp LGUI &kp LSHFT>;
        };

        // CUSTOM: Ctrl+Shift+Enter
        ctrl_shift_enter: ctrl_shift_enter_macro {
            compatible = "zmk,behavior-macro";
            label = "CTRL_SHIFT_ENTER";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL &kp LSHFT>, <&macro_tap &kp RET>, <&macro_release &kp LCTRL &kp LSHFT>;
        };

        // CUSTOM: En dash (–) - Windows Alt+0150
        endash: endash_macro {
            compatible = "zmk,behavior-macro";
            label = "ENDASH";
            #binding-cells = <0>;
            bindings 
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N0>
                , <&macro_release &kp LALT>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        // DISABLED FOR TESTING - Left+Right arrows = Select word
        // combo_select_word {
        //     timeout-ms = <100>;
        //     key-positions = <69 70>;
        //     bindings = <&select_word>;
        // };
        
        // DISABLED FOR TESTING - Up+Down arrows = Select section
        // combo_select_section {
        //     timeout-ms = <100>;
        //     key-positions = <73 74>;
        //     bindings = <&select_section>;
        // };

        // Left+Home = Start of document
        combo_doc_start {
            timeout-ms = <100>;
            key-positions = <67 69>;
            bindings = <&doc_start>;
        };

        // Right+End = End of document
        combo_doc_end {
            timeout-ms = <100>;
            key-positions = <72 70>;
            bindings = <&doc_end>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4          &kp F5                                                                                                &kp F6  &kp F7   &kp F8          &kp F9    &kp F10
            &equals_endash_ht 0 EQUAL      &kp N1   &kp N2      &kp N3          &kp N4          &kp N5                                                                        &kp N6  &kp N7   &kp N8          &kp N9    &kp N0     &hyphen_emdash_ht 0 MINUS
            &esc_caps_ht CAPSLOCK ESC    &kp Q    &kp W       &kp E           &kp R           &kp T                                                                         &y_redo_ht 0 Y   &u_underline_ht 0 U    &i_italic_ht 0 I           &o_open_ht 0 O     &p_screenshot_ht 0 P      &kp BSLH
            &tab_taskview_ht 0 TAB        &a_selectall_ht 0 A  &s_save_ht 0 S  &d_duplicate_ht 0 D  &f_find_ht 0 F   &kp G                                                                         &kp H   &kp J    &kp K           &kp L     &kp SEMI   &kp SQT
            &kp GRAVE      &z_undo_ht 0 Z       &x_cut_ht 0 X   &c_copy_ht 0 C  &v_paste_ht 0 V &b_bold_ht 0 B   &lshift_capsword_td &kp LCTRL &layer_td   &kp LGUI  &kp RCTRL &rshift_capsword_td &n_new_ht 0 N   &kp M    &kp COMMA       &kp DOT   &kp FSLH   &kp PG_UP
            &magic MAGIC 0 &kp HOME &kp END     &kp LEFT        &kp RIGHT               &kp BSPC  &kp DEL   &lalt_enter_ht RET LALT    &kp LALT  &enter_cse_ht 0 RET &kp SPACE        &kp UP   &kp DOWN        &kp LBKT  &kp RBKT   &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic MAGIC 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none           &none           &none           &none                                                                                                           &none &none &none &none &bt BT_CLR_ALL
            &none             &none           &none           &none           &none           &none                                                                                   &none &none &none &none &none &none
            &none             &rgb_ug RGB_EFF &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                         &none &none &none &none &none &none
            &bootloader       &rgb_ug RGB_EFR &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &none                                                                                   &none &none &none &none &none &bootloader
            &sys_reset        &none           &none           &none           &none           &none           &bt_2   &bt_3         &none               &none &none &none              &none &none &none &none &none &sys_reset
            &none             &none           &none           &none           &none                           &bt_0   &bt_1         &out OUT_USB        &none &none &none                    &none &none &none &none &none
            >;
        };

        factory_test_layer {
            bindings = <
            &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3                                                                           &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_CLR
            &kp F1     &kp F2       &kp F3       &kp F4       &kp F5       &kp F6                                                           &kp F6   &kp F7       &kp F8       &kp F9       &kp F10      &kp F11
            &kp N1     &kp N2       &kp N3       &kp N4       &kp N5       &kp N6                                                           &kp N6   &kp N7       &kp N8       &kp N9       &kp N0       &kp F12
            &kp Q      &kp W        &kp E        &kp R        &kp T        &kp Y                                                            &kp Y    &kp U        &kp I        &kp O        &kp P        &kp BSPC
            &kp A      &kp S        &kp D        &kp F        &kp G        &kp H        &kp LSHFT &kp LCTRL &none        &none &kp RCTRL &kp RSHFT &kp H   &kp J        &kp K        &kp L        &kp SEMI     &kp SQT
            &kp Z      &kp X        &kp C        &kp V        &kp B                     &kp SPACE &kp RET   &none        &none &kp RET   &kp SPACE         &kp N        &kp M        &kp COMMA    &kp DOT      &kp FSLH
            >;
        };
    };
};
